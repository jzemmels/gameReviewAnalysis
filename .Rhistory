shiny::runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
bigrams
bigrams %>%
igraph::graph_from_data_frame()
bigrams %>%
tidygraph::as_tbl_graph()
bigrams %>%
tidygraph::as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
tidygraph::as_tbl_graph() %>% mutate(pop = ifelse(n > 0,"high","low"))
bigrams %>%
tidygraph::as_tbl_graph()
bigrams %>%
tidygraph::as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
tidygraph::as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_edges(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
plt <<- bigrams %>%
tidygraph::as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_edges(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
plt
runApp('code/metacriticUserReviews')
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_nodes(~ platform) +
# ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
igraph::graph_from_data_frame()
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
tidygraph::as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
dat <- bigrams %>% igraph::graph_from_data_frame()
dat
bigrams
cbind(c(bigrams[,1],bigrams[,2],bigrams[match(c(bigrams[,1],bigrams[,2]),bigrams[,1]),3]))
facet_nodes <- cbind(c(bigrams[,1],bigrams[,2],bigrams[match(c(bigrams[,1],bigrams[,2]),bigrams[,1]),3]))
igraph::V(dat) <- facet_nodes[match(igraph::V(dat)$name,facet_nodes[,1]),2]
match(igraph::V(dat)$name,facet_nodes[,1])
bigrams <<- bigrams
facet_nodes <- cbind(c(bigrams[,1], bigrams[,2]),
bigrams[match(c(bigrams[,1], bigrams[,2]), bigrams[,1]),3])
bigrams
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
bigrams <<- bigrams
bigrams
runApp('code/metacriticUserReviews')
bigrams
saveRDS(bigrams,file = "bigrams.rds")
bigrams <- readRDS("bigrams.rds")
bigrams <- readRDS("code/metacriticUserReviews/bigrams.rds")
graph_cors <- bigrams %>%
igraph::graph_from_data_frame()
facet_nodes <- cbind(c(bigrams[,1], bigrams[,2]),
bigrams[match(c(bigrams[,1], bigrams[,2]), bigrams[,1]),3])
# Assign the facet_var variable to corresponding dyad pairs
V(graph_cors)$facet_node <- facet_nodes[match(V(graph_cors)$name, facet_nodes[,1]),2]
library(igraph)
# Assign the facet_var variable to corresponding dyad pairs
V(graph_cors)$facet_node <- facet_nodes[match(V(graph_cors)$name, facet_nodes[,1]),2]
graph_cors%>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_edges(~ platform) +
# ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
graph_cors%>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_nodes(~ platform) +
# ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
graph_cors
graph_cors%>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_nodes(~ facet_node) +
# ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
graph_cors%>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_nodes(~ facet_node) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
graph_cors
V(graph_cors)$facet_node
facet_nodes
bigrams
bigrams[match(c(bigrams[,1], bigrams[,2]), bigrams[,1])
]
bigrams[match(c(bigrams[,1], bigrams[,2]), bigrams[,1]),3]
match(c(bigrams[,1], bigrams[,2]), bigrams[,1])
bigrams[,2]
bigrams[,1]
bigrams
bigrams %>% gather(vars,values,-n,-platform)
bigrams %>% gather(vars,values,-n,-platform) %>% distinct()
bigrams %>% gather(vars,values,-n,-platform) %>% distinct() %>% pull(platform)
bigrams %>% pivot_longer(cols = c(word1,word2))
# Assign the facet_var variable to corresponding dyad pairs
V(graph_cors)$facet_node <-
bigrams %>% pivot_longer(cols = c(word1,word2)) %>% distinct() %>% pull(platform)
# Assign the facet_var variable to corresponding dyad pairs
V(graph_cors)$facet_node <-
bigrams %>% pivot_longer(cols = c(word1,word2)) %>% select(-name) %>% distinct() %>% pull(platform)
# Assign the facet_var variable to corresponding dyad pairs
bigrams %>% pivot_longer(cols = c(word1,word2)) %>% select(-name) %>% distinct()
V(graph_cors)
bigrams
bigrams %>% gather(vars,values,-n,-platform) %>% distinct() %>% pull(platform)
bigrams %>% gather(vars,values,-n,-platform) %>% distinct(.keep_all = TRUE) %>% pull(platform)
# Assign the facet_var variable to corresponding dyad pairs
bigrams %>% pivot_longer(cols = c(word1,word2)) %>% select(-name) %>% distinct()
# Assign the facet_var variable to corresponding dyad pairs
bigrams %>% pivot_longer(cols = c(word1,word2)) %>% select(-c(name,n)) %>% distinct()
# Assign the facet_var variable to corresponding dyad pairs
V(graph_cors)$facet_node <- c("Playstation 5","PC","PC","Playstation 5","PC")
graph_cors%>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_nodes(~ facet_node) +
# ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams
bigrams %>%
tidygraph::as_tbl_graph()
bigrams
bigrams %>%
tidygraph::as_tbl_graph()
bigrams %>%
tidygraph::as_tbl_graph() %>% ggraph(layout = "fr") + geom_node_point() + geom_edge_link()
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n,colour = platform), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_edges(~ platform) +
# ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n,colour = platform), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
# ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n,colour = platform), show.legend = FALSE,check_overlap = TRUE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
# ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n,colour = platform), show.legend = FALSE,position = "dodge",
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
# ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
?geom_edge_link
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_arc(aes(edge_alpha = n,colour = platform), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
ggraph::facet_edges(~ platform) +
# ggraph::facet_nodes(~ platform) +
# facet_wrap(~ platform,scales = "free") +
# facet_grid(rows = vars(platform)) +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_arc(aes(edge_alpha = n,colour = platform), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_bend(aes(edge_alpha = n,colour = platform), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_parallel(aes(edge_alpha = n,colour = platform), show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_parallel(aes(edge_alpha = n,colour = platform), #show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black"))
bigrams %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_parallel(aes(edge_alpha = n,colour = platform), #show.legend = FALSE,
arrow = grid::arrow(type = "closed", length = unit(.15, "inches")),
end_cap = circle(.07, 'inches')) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void() +
theme(strip.text = element_text(size = 10),
panel.spacing = unit(2, "lines"),
panel.background = element_rect(fill = NA, color = "black")) +
guides(edge_alpha = "none") +
theme(legend.position = "bottom")
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
shiny::runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
?plotly::plotly_click
library(plotly)
?event_data
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
plotly::event_data("plotly_click")
plotly::event_data(event = "plotly_click")
runApp('code/metacriticUserReviews')
timeSeriesClick
reviews %>% filter(date == selectedDate)
reviews %>% filter(date == "2021-02-12")
Q
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
timeSeriesClick
aveRating$date
timeSeriesClick
selectedDate
aveRating$date
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
timeSeriesClick
Q
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
timeSeriesClick
timeSeriesClick
factor(c("PC","Playstation5"))[1]
levels(factor(c("PC","Playstation5")))[1]
levels(factor(aveRating$platform))[timeSeriesClick$curveNumber + 1]
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
aveRating
aveRating$platform
timeSeriesClick$curveNumber
levels(factor(aveRating$platform))[timeSeriesClick$curveNumber +
1]
aveRating %>% filter(platform == levels(factor(aveRating$platform))[timeSeriesClick$curveNumber +
1]) %>% arrange(date) %>% slice(timeSeriesClick$pointNumber +
1)
aveRating %>% filter(platform == levels(factor(aveRating$platform))[timeSeriesClick$curveNumber +
1])
levels(factor(aveRating$platform))[timeSeriesClick$curveNumber +
1]
aveRating
aveRating %>% filter(platform == "PC")
runApp('code/metacriticUserReviews')
Q
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
runApp('code/metacriticUserReviews')
shiny::runApp('code/metacriticUserReviews')
